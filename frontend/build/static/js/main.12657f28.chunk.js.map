{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","React","createElement","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","Content-type","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","picLoading","setPicLoading","console","log","Homepage","Container","maxW","centerContent","Box","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameUser","getSender","loggedUser","users","_users$","getSenderFull","ProfileModal","isOpen","onOpen","onClose","useDisclosure","Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","pic","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","key","isSameSender","undefined","isLastMessage","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","showEmojiPicker","setShowEmojiPicker","fileRef","useRef","PickerRef","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","disconnect","newMessageRecieved","chat","includes","handleOutsideClick","current","contains","document","addEventListener","removeEventListener","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","emoji","replace","messageContent","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","border","marginRight","float","clear","InsertEmoticonIcon","handleEmojiPickerHideShow","ref","Picker","onEmojiClick","handleEmojiClick","emojiObject","prevMessage","theme","file","files","formData","FormData","append","Content-Type","params","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","delUser","filter","sel","handleDelete","slice","userToAdd","handleGroup","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","getElementById"],"mappings":"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","file":"static/js/main.12657f28.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Chat Box\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport React from \"react\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect } from \"react\";\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport Picker from \"emoji-picker-react\";\r\nimport InsertEmoticonIcon from \"@mui/icons-material/InsertEmoticon\";\r\n//import AttachFileIcon from \"@mui/icons-material/AttachFile\";\r\nimport { useRef } from \"react\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const fileRef = useRef();\r\n  const PickerRef = useRef();\r\n\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && (newMessage || showEmojiPicker)) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        // Extract the emoji from the newMessage state\r\n        const emoji = newMessage.replace(/[^a-zA-Z0-9]/g, \"\"); // Keep only alphanumeric characters\r\n\r\n        let messageContent = newMessage ?? \"\";\r\n        if (showEmojiPicker && emoji) {\r\n          messageContent += emoji; // Append selected emoji to the message\r\n          setShowEmojiPicker(false); // Hide the emoji picker\r\n        }\r\n\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: messageContent,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"top\",\r\n        });\r\n      }\r\n      console.log(\"Sending message:\", newMessage);\r\n\r\n      // Clear the input field\r\n      setNewMessage(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    return () => {\r\n      // Cleanup code if needed\r\n      socket.disconnect();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleOutsideClick = (e) => {\r\n      if (e.target.id !== \"emoji-open\") {\r\n        if (PickerRef.current && !PickerRef.current.contains(e.target)) {\r\n          setShowEmojiPicker(false);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", handleOutsideClick);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleOutsideClick);\r\n    };\r\n  }, []);\r\n\r\n  const handleEmojiPickerHideShow = () => {\r\n    setShowEmojiPicker(!showEmojiPicker);\r\n  };\r\n\r\n  const handleEmojiClick = (emojiObject, event) => {\r\n    // Extract the emoji from the emojiObject\r\n    const emoji = emojiObject?.emoji || \"\";\r\n\r\n    // Now you can use the emoji variable\r\n    setNewMessage((prevMessage) => prevMessage + (emoji || \"\"));\r\n  };\r\n\r\n  const selectFile = async (e) => {\r\n    try {\r\n      const file = e.target.files[0];\r\n      const formData = new FormData();\r\n      formData.append(\"image\", file);\r\n\r\n      const response = await axios.post(\"/api/add-image-message\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n        params: {\r\n          chatId: selectedChat,\r\n        },\r\n      });\r\n      const data = response.data;\r\n      if (response.status === 201) {\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to send the Message\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendFile = async (e) => {};\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage ?? \"\"}\r\n                onChange={typingHandler}\r\n                style={{\r\n                  border: \"2px solid blue\",\r\n                  borderRadius: \"5px\",\r\n                  width: \"92%\",\r\n                  marginRight: \"px\",\r\n                  float: \"right\",\r\n                  clear: \"both\",\r\n                }}\r\n              />\r\n              <InsertEmoticonIcon\r\n                title=\"Emoji\"\r\n                id=\"emoji-open\"\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  marginRight: \"10px\",\r\n                  fontSize: \"35px\",\r\n                }}\r\n                onClick={handleEmojiPickerHideShow}\r\n              />\r\n              {showEmojiPicker && (\r\n                <div\r\n                  className=\"absolute bottom-24 left-16 z-40\"\r\n                  ref={PickerRef}\r\n                >\r\n                  <Picker onEmojiClick={handleEmojiClick} theme=\"dark\" />{\" \"}\r\n                </div>\r\n              )}\r\n\r\n              {/*<label htmlFor=\"fileInput\">\r\n                <AttachFileIcon\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    fontSize: \"35px\",\r\n                  }}\r\n                />\r\n              </label>*/}\r\n              <input\r\n                type=\"file\"\r\n                ref={fileRef}\r\n                id=\"fileInput\"\r\n                style={{ display: \"none\" }}\r\n                onChange={sendFile}\r\n                onClick={selectFile}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\nimport React from \"react\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\"; \r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import React from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Chat-Box\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport React from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n"],"sourceRoot":""}